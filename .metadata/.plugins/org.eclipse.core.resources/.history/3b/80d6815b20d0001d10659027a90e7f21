package tcp;

/**
 * TCPServer: Servidor para conexao TCP com Threads Descricao: Recebe uma
 * conexao, cria uma thread, recebe uma mensagem e finaliza a conexao
 */
import java.net.*;
import java.io.*;
import java.util.Scanner;

public class TCPServer {

    public static void main(String args[]) {
        try {
            int serverPort = 6666; // porta do servidor

            /* cria um socket e mapeia a porta para aguardar conexao */
            ServerSocket listenSocket = new ServerSocket(serverPort);

            while (true) {
                System.out.println("Servidor aguardando conexao ...");

                /* aguarda conexoes */
                Socket clientSocket = listenSocket.accept();

                DataInputStream in = new DataInputStream(clientSocket.getInputStream());
                DataOutputStream out = new DataOutputStream(clientSocket.getOutputStream());

                System.out.println("Cliente conectado ... Criando thread ...");


                ServerReceiveMessageThread receiveMessage = new ServerReceiveMessageThread(clientSocket, in);
                ServerSendMessageThread sendMessage = new ServerSendMessageThread(clientSocket, out);
                
                receiveMessage.start();
                sendMessage.start();  
            } 

            } catch (Exception e) {
            System.out.println("Listen socket:" + e.getMessage());
        } //catch
    } //main
} //class


class ServerReceiveMessageThread extends Thread {

    DataInputStream in;
    Socket clientSocket;

    public ServerReceiveMessageThread(Socket clientSocket, DataInputStream  in){
        this.in = in;
        this.clientSocket = clientSocket;
    }

    @Override
    public void run(){
        try {
            String buffer = "";
            while (true) {
                buffer = in.readUTF();   /* aguarda o envio de dados */

                if (buffer.equals("PARAR")) break;                
                System.out.println("\nCliente disse: " + buffer);
                System.out.print("Mensagem: ");
            }
        } catch (EOFException eofe) {
            System.out.println("EOF: " + eofe.getMessage());
        } catch (IOException ioe) {
            System.out.println("IOE: " + ioe.getMessage());
        } finally {
            try {
                in.close();
                clientSocket.close();
            } catch (IOException ioe) {
                System.err.println("IOE: " + ioe);
            }
        }
    }
}

class ServerSendMessageThread extends Thread {

    DataOutputStream out;
    Socket clientSocket;

    public ServerSendMessageThread(Socket clientSocket, DataOutputStream  out){
        this.out = out;
        this.clientSocket = clientSocket;
    }

    @Override
    public void run(){
        try {
            Scanner reader = new Scanner(System.in); // ler mensagens via teclado

            String buffer = "";
            while (true) {
                System.out.print("Mensagem: ");
                buffer = reader.nextLine(); // lÃª mensagem via teclado

                if (buffer.equals("PARAR")) break;

                out.writeUTF(buffer);
            }
        } catch (EOFException eofe) {
            System.out.println("EOF: " + eofe.getMessage());
        } catch (IOException ioe) {
            System.out.println("IOE: " + ioe.getMessage());
        } finally {
            try {
                out.close();
                clientSocket.close();
            } catch (IOException ioe) {
                System.err.println("IOE: " + ioe);
            }
        }
    }
}